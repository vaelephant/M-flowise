{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/highlight.js@9.15.10/node_modules/highlight.js/lib/languages/less.js"],
  "sourcesContent": ["module.exports = function(hljs) {\n  var IDENT_RE        = '[\\\\w-]+'; // yes, Less identifiers may begin with a digit\n  var INTERP_IDENT_RE = '(' + IDENT_RE + '|@{' + IDENT_RE + '})';\n\n  /* Generic Modes */\n\n  var RULES = [], VALUE = []; // forward def. for recursive modes\n\n  var STRING_MODE = function(c) { return {\n    // Less strings are not multiline (also include '~' for more consistent coloring of \"escaped\" strings)\n    className: 'string', begin: '~?' + c + '.*?' + c\n  };};\n\n  var IDENT_MODE = function(name, begin, relevance) { return {\n    className: name, begin: begin, relevance: relevance\n  };};\n\n  var PARENS_MODE = {\n    // used only to properly balance nested parens inside mixin call, def. arg list\n    begin: '\\\\(', end: '\\\\)', contains: VALUE, relevance: 0\n  };\n\n  // generic Less highlighter (used almost everywhere except selectors):\n  VALUE.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    STRING_MODE(\"'\"),\n    STRING_MODE('\"'),\n    hljs.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(\n    {\n      begin: '(url|data-uri)\\\\(',\n      starts: {className: 'string', end: '[\\\\)\\\\n]', excludeEnd: true}\n    },\n    IDENT_MODE('number', '#[0-9A-Fa-f]+\\\\b'),\n    PARENS_MODE,\n    IDENT_MODE('variable', '@@?' + IDENT_RE, 10),\n    IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),\n    IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string\n    { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):\n      className: 'attribute', begin: IDENT_RE + '\\\\s*:', end: ':', returnBegin: true, excludeEnd: true\n    },\n    {\n      className: 'meta',\n      begin: '!important'\n    }\n  );\n\n  var VALUE_WITH_RULESETS = VALUE.concat({\n    begin: '{', end: '}', contains: RULES\n  });\n\n  var MIXIN_GUARD_MODE = {\n    beginKeywords: 'when', endsWithParent: true,\n    contains: [{beginKeywords: 'and not'}].concat(VALUE) // using this form to override VALUE’s 'function' match\n  };\n\n  /* Rule-Level Modes */\n\n  var RULE_MODE = {\n    begin: INTERP_IDENT_RE + '\\\\s*:', returnBegin: true, end: '[;}]',\n    relevance: 0,\n    contains: [\n      {\n        className: 'attribute',\n        begin: INTERP_IDENT_RE, end: ':', excludeEnd: true,\n        starts: {\n          endsWithParent: true, illegal: '[<=$]',\n          relevance: 0,\n          contains: VALUE\n        }\n      }\n    ]\n  };\n\n  var AT_RULE_MODE = {\n    className: 'keyword',\n    begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\\\b',\n    starts: {end: '[;{}]', returnEnd: true, contains: VALUE, relevance: 0}\n  };\n\n  // variable definitions and calls\n  var VAR_RULE_MODE = {\n    className: 'variable',\n    variants: [\n      // using more strict pattern for higher relevance to increase chances of Less detection.\n      // this is *the only* Less specific statement used in most of the sources, so...\n      // (we’ll still often loose to the css-parser unless there's '//' comment,\n      // simply because 1 variable just can't beat 99 properties :)\n      {begin: '@' + IDENT_RE + '\\\\s*:', relevance: 15},\n      {begin: '@' + IDENT_RE}\n    ],\n    starts: {end: '[;}]', returnEnd: true, contains: VALUE_WITH_RULESETS}\n  };\n\n  var SELECTOR_MODE = {\n    // first parse unambiguous selectors (i.e. those not starting with tag)\n    // then fall into the scary lookahead-discriminator variant.\n    // this mode also handles mixin definitions and calls\n    variants: [{\n      begin: '[\\\\.#:&\\\\[>]', end: '[;{}]'  // mixin calls end with ';'\n      }, {\n      begin: INTERP_IDENT_RE, end: '{'\n    }],\n    returnBegin: true,\n    returnEnd:   true,\n    illegal: '[<=\\'$\"]',\n    relevance: 0,\n    contains: [\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      MIXIN_GUARD_MODE,\n      IDENT_MODE('keyword',  'all\\\\b'),\n      IDENT_MODE('variable', '@{'  + IDENT_RE + '}'),     // otherwise it’s identified as tag\n      IDENT_MODE('selector-tag',  INTERP_IDENT_RE + '%?', 0), // '%' for more consistent coloring of @keyframes \"tags\"\n      IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),\n      IDENT_MODE('selector-class', '\\\\.' + INTERP_IDENT_RE, 0),\n      IDENT_MODE('selector-tag',  '&', 0),\n      {className: 'selector-attr', begin: '\\\\[', end: '\\\\]'},\n      {className: 'selector-pseudo', begin: /:(:)?[a-zA-Z0-9\\_\\-\\+\\(\\)\"'.]+/},\n      {begin: '\\\\(', end: '\\\\)', contains: VALUE_WITH_RULESETS}, // argument list of parametric mixins\n      {begin: '!important'} // eat !important after mixin call or it will be colored as tag\n    ]\n  };\n\n  RULES.push(\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    AT_RULE_MODE,\n    VAR_RULE_MODE,\n    RULE_MODE,\n    SELECTOR_MODE\n  );\n\n  return {\n    case_insensitive: true,\n    illegal: '[=>\\'/<($\"]',\n    contains: RULES\n  };\n};"],
  "mappings": ";;;;;AAAA;AAAA;AAAA,WAAO,UAAU,SAAS,MAAM;AAC9B,UAAI,WAAkB;AACtB,UAAI,kBAAkB,MAAM,WAAW,QAAQ,WAAW;AAI1D,UAAI,QAAQ,CAAC,GAAG,QAAQ,CAAC;AAEzB,UAAI,cAAc,SAAS,GAAG;AAAE,eAAO;AAAA;AAAA,UAErC,WAAW;AAAA,UAAU,OAAO,OAAO,IAAI,QAAQ;AAAA,QACjD;AAAA,MAAE;AAEF,UAAI,aAAa,SAAS,MAAM,OAAO,WAAW;AAAE,eAAO;AAAA,UACzD,WAAW;AAAA,UAAM;AAAA,UAAc;AAAA,QACjC;AAAA,MAAE;AAEF,UAAI,cAAc;AAAA;AAAA,QAEhB,OAAO;AAAA,QAAO,KAAK;AAAA,QAAO,UAAU;AAAA,QAAO,WAAW;AAAA,MACxD;AAGA,YAAM;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL,YAAY,GAAG;AAAA,QACf,YAAY,GAAG;AAAA,QACf,KAAK;AAAA;AAAA,QACL;AAAA,UACE,OAAO;AAAA,UACP,QAAQ,EAAC,WAAW,UAAU,KAAK,YAAY,YAAY,KAAI;AAAA,QACjE;AAAA,QACA,WAAW,UAAU,kBAAkB;AAAA,QACvC;AAAA,QACA,WAAW,YAAY,QAAQ,UAAU,EAAE;AAAA,QAC3C,WAAW,YAAY,OAAQ,WAAW,GAAG;AAAA,QAC7C,WAAW,YAAY,YAAY;AAAA;AAAA,QACnC;AAAA;AAAA,UACE,WAAW;AAAA,UAAa,OAAO,WAAW;AAAA,UAAS,KAAK;AAAA,UAAK,aAAa;AAAA,UAAM,YAAY;AAAA,QAC9F;AAAA,QACA;AAAA,UACE,WAAW;AAAA,UACX,OAAO;AAAA,QACT;AAAA,MACF;AAEA,UAAI,sBAAsB,MAAM,OAAO;AAAA,QACrC,OAAO;AAAA,QAAK,KAAK;AAAA,QAAK,UAAU;AAAA,MAClC,CAAC;AAED,UAAI,mBAAmB;AAAA,QACrB,eAAe;AAAA,QAAQ,gBAAgB;AAAA,QACvC,UAAU,CAAC,EAAC,eAAe,UAAS,CAAC,EAAE,OAAO,KAAK;AAAA;AAAA,MACrD;AAIA,UAAI,YAAY;AAAA,QACd,OAAO,kBAAkB;AAAA,QAAS,aAAa;AAAA,QAAM,KAAK;AAAA,QAC1D,WAAW;AAAA,QACX,UAAU;AAAA,UACR;AAAA,YACE,WAAW;AAAA,YACX,OAAO;AAAA,YAAiB,KAAK;AAAA,YAAK,YAAY;AAAA,YAC9C,QAAQ;AAAA,cACN,gBAAgB;AAAA,cAAM,SAAS;AAAA,cAC/B,WAAW;AAAA,cACX,UAAU;AAAA,YACZ;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,UAAI,eAAe;AAAA,QACjB,WAAW;AAAA,QACX,OAAO;AAAA,QACP,QAAQ,EAAC,KAAK,SAAS,WAAW,MAAM,UAAU,OAAO,WAAW,EAAC;AAAA,MACvE;AAGA,UAAI,gBAAgB;AAAA,QAClB,WAAW;AAAA,QACX,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,UAKR,EAAC,OAAO,MAAM,WAAW,SAAS,WAAW,GAAE;AAAA,UAC/C,EAAC,OAAO,MAAM,SAAQ;AAAA,QACxB;AAAA,QACA,QAAQ,EAAC,KAAK,QAAQ,WAAW,MAAM,UAAU,oBAAmB;AAAA,MACtE;AAEA,UAAI,gBAAgB;AAAA;AAAA;AAAA;AAAA,QAIlB,UAAU,CAAC;AAAA,UACT,OAAO;AAAA,UAAgB,KAAK;AAAA;AAAA,QAC5B,GAAG;AAAA,UACH,OAAO;AAAA,UAAiB,KAAK;AAAA,QAC/B,CAAC;AAAA,QACD,aAAa;AAAA,QACb,WAAa;AAAA,QACb,SAAS;AAAA,QACT,WAAW;AAAA,QACX,UAAU;AAAA,UACR,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,UACA,WAAW,WAAY,QAAQ;AAAA,UAC/B,WAAW,YAAY,OAAQ,WAAW,GAAG;AAAA;AAAA,UAC7C,WAAW,gBAAiB,kBAAkB,MAAM,CAAC;AAAA;AAAA,UACrD,WAAW,eAAe,MAAM,eAAe;AAAA,UAC/C,WAAW,kBAAkB,QAAQ,iBAAiB,CAAC;AAAA,UACvD,WAAW,gBAAiB,KAAK,CAAC;AAAA,UAClC,EAAC,WAAW,iBAAiB,OAAO,OAAO,KAAK,MAAK;AAAA,UACrD,EAAC,WAAW,mBAAmB,OAAO,iCAAgC;AAAA,UACtE,EAAC,OAAO,OAAO,KAAK,OAAO,UAAU,oBAAmB;AAAA;AAAA,UACxD,EAAC,OAAO,aAAY;AAAA;AAAA,QACtB;AAAA,MACF;AAEA,YAAM;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAEA,aAAO;AAAA,QACL,kBAAkB;AAAA,QAClB,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,IACF;AAAA;AAAA;",
  "names": []
}
