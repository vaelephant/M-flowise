{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/highlight.js@9.15.10/node_modules/highlight.js/lib/languages/cpp.js"],
  "sourcesContent": ["module.exports = function(hljs) {\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n\n  var STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"', end: '\"',\n        illegal: '\\\\n',\n        contains: [hljs.BACKSLASH_ESCAPE]\n      },\n      { begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\((?:.|\\n)*?\\)\\1\"/ },\n      {\n        begin: '\\'\\\\\\\\?.', end: '\\'',\n        illegal: '.'\n      }\n    ]\n  };\n\n  var NUMBERS = {\n    className: 'number',\n    variants: [\n      { begin: '\\\\b(0b[01\\']+)' },\n      { begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)' },\n      { begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)' }\n    ],\n    relevance: 0\n  };\n\n  var PREPROCESSOR =       {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/, end: /$/,\n    keywords: {\n      'meta-keyword':\n        'if else elif endif define undef warning error line ' +\n        'pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/, relevance: 0\n      },\n      hljs.inherit(STRINGS, {className: 'meta-string'}),\n      {\n        className: 'meta-string',\n        begin: /<[^\\n>]*>/, end: /$/,\n        illegal: '\\\\n',\n      },\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char catch import module export virtual operator sizeof ' +\n      'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' +\n      'unsigned long volatile static protected bool template mutable if public friend ' +\n      'do goto auto void enum else break extern using asm case typeid ' +\n      'short reinterpret_cast|10 default double register explicit signed typename try this ' +\n      'switch continue inline delete alignof constexpr decltype ' +\n      'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' +\n      'atomic_bool atomic_char atomic_schar ' +\n      'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' +\n      'atomic_ullong new throw return ' +\n      'and or not',\n    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n    literal: 'true false nullptr NULL'\n  };\n\n  var EXPRESSION_CONTAINS = [\n    CPP_PRIMITIVE_TYPES,\n    hljs.C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp', 'hh', 'hxx', 'cxx'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: EXPRESSION_CONTAINS.concat([\n      PREPROCESSOR,\n      {\n        begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<', end: '>',\n        keywords: CPP_KEYWORDS,\n        contains: ['self', CPP_PRIMITIVE_TYPES]\n      },\n      {\n        begin: hljs.IDENT_RE + '::',\n        keywords: CPP_KEYWORDS\n      },\n      {\n        // This mode covers expression context where we can't expect a function\n        // definition and shouldn't highlight anything that looks like one:\n        // `return some()`, `else if()`, `(x*sum(1, 2))`\n        variants: [\n          {begin: /=/, end: /;/},\n          {begin: /\\(/, end: /\\)/},\n          {beginKeywords: 'new throw return else', end: /;/}\n        ],\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([\n          {\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            contains: EXPRESSION_CONTAINS.concat(['self']),\n            relevance: 0\n          }\n        ]),\n        relevance: 0\n      },\n      {\n        className: 'function',\n        begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n        returnBegin: true, end: /[{;=]/,\n        excludeEnd: true,\n        keywords: CPP_KEYWORDS,\n        illegal: /[^\\w\\s\\*&]/,\n        contains: [\n          {\n            begin: FUNCTION_TITLE, returnBegin: true,\n            contains: [hljs.TITLE_MODE],\n            relevance: 0\n          },\n          {\n            className: 'params',\n            begin: /\\(/, end: /\\)/,\n            keywords: CPP_KEYWORDS,\n            relevance: 0,\n            contains: [\n              hljs.C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              CPP_PRIMITIVE_TYPES,\n              // Count matching parentheses.\n              {\n                begin: /\\(/, end: /\\)/,\n                keywords: CPP_KEYWORDS,\n                relevance: 0,\n                contains: [\n                  'self',\n                  hljs.C_LINE_COMMENT_MODE,\n                  hljs.C_BLOCK_COMMENT_MODE,\n                  STRINGS,\n                  NUMBERS,\n                  CPP_PRIMITIVE_TYPES\n                ]\n              }\n            ]\n          },\n          hljs.C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          PREPROCESSOR\n        ]\n      },\n      {\n        className: 'class',\n        beginKeywords: 'class struct', end: /[{;:]/,\n        contains: [\n          {begin: /</, end: />/, contains: ['self']}, // skip generic stuff\n          hljs.TITLE_MODE\n        ]\n      }\n    ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};"],
  "mappings": "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",
  "names": []
}
